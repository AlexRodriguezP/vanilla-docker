source vanilla_dev_Discussion {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_dev
    sql_query_range = SELECT MIN(DiscussionID),(select MaxID from GDN_SphinxCounter where CounterID = 1) FROM GDN_Discussion
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 1, max(DiscussionID) from GDN_Discussion
    sql_query = select \
            DiscussionID * 10 + 1, \
            DiscussionID, \
            CategoryID, \
            InsertUserID, \
            unix_timestamp(DateInserted) as DateInserted, \
            Name, \
            Body, \
            field(Type, 'Question', 'Poll') as dtype, \
            inet_aton(InsertIPAddress) as IP, \
            Score \
        from GDN_Discussion \
        where \
            DiscussionID >= $start AND \
            DiscussionID <= $end
    sql_attr_uint = DiscussionID
    sql_attr_uint = CategoryID
    sql_attr_uint = InsertUserID
    sql_attr_timestamp = DateInserted
    sql_attr_float = Score
    sql_attr_uint = dtype
    sql_attr_uint = IP
    sql_attr_multi = uint Tags from ranged-query; \
        select DiscussionID * 10 + 1, TagID \
        from GDN_TagDiscussion \
        where DiscussionID between $start and $end; \
        select min(DiscussionID), max(DiscussionID) from GDN_TagDiscussion
}

source vanilla_dev_Discussion_Delta: vanilla_dev_Discussion {
    sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 1), MAX(DiscussionID) FROM GDN_Discussion
    sql_query_pre = set names utf8
    sql_query = select \
            DiscussionID * 10 + 1, \
            DiscussionID, \
            CategoryID, \
            InsertUserID, \
            unix_timestamp(DateInserted) as DateInserted, \
            Name, \
            Body, \
            field(Type, 'Question', 'Poll') as dtype, \
            inet_aton(InsertIPAddress) as IP, \
            Score \
        from GDN_Discussion \
        where \
           DiscussionID >= $start AND \
           DiscussionID <= $end
}

index vanilla_dev_Discussion {
    source = vanilla_dev_Discussion
    path = /usr/local/etc/sphinx/data/Discussion
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
}

index vanilla_dev_Discussion_Delta: vanilla_dev_Discussion {
    source = vanilla_dev_Discussion_Delta
    path = /usr/local/etc/sphinx/data/Discussion_Delta
}

source vanilla_dev_Comment {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_dev
    sql_query_range = SELECT MIN(CommentID),(select MaxID from GDN_SphinxCounter where CounterID = 2) FROM GDN_Comment
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 2, max(CommentID) from GDN_Comment
    sql_query = select \
            c.CommentID * 10 + 2, \
            c.DiscussionID, \
            d.CategoryID, \
            c.InsertUserID, \
            unix_timestamp(c.DateInserted) as DateInserted, \
            concat('RE: ', d.Name) as Name, \
            c.Body, \
            inet_aton(c.InsertIPAddress) as IP, \
            field(d.Type, 'Question') + 100 as dtype, \
            c.Score \
        from GDN_Comment c join GDN_Discussion d on c.DiscussionID = d.DiscussionID \
        where \
            CommentID >= $start AND \
            CommentID <= $end
    sql_attr_uint = CategoryID
    sql_attr_uint = DiscussionID
    sql_attr_uint = InsertUserID
    sql_attr_timestamp = DateInserted
    sql_attr_uint = IP
    sql_attr_uint = dtype
    sql_attr_float = Score
}

source vanilla_dev_Comment_Delta: vanilla_dev_Comment {
    sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 2), MAX(CommentID) FROM GDN_Comment
    sql_query_pre = set names utf8
    sql_query = select \
            c.CommentID * 10 + 2, \
            c.DiscussionID, \
            d.CategoryID, \
            c.InsertUserID, \
            unix_timestamp(c.DateInserted) as DateInserted, \
            concat('RE: ', d.Name) as Name, \
            c.Body, \
            inet_aton(c.InsertIPAddress) as IP, \
            field(d.Type, 'Question') + 100 as dtype, \
            c.Score \
        from GDN_Comment c join GDN_Discussion d on c.DiscussionID = d.DiscussionID \
        where \
           CommentID >= $start AND \
           CommentID <= $end
}

index vanilla_dev_Comment {
    source = vanilla_dev_Comment
    path = /usr/local/etc/sphinx/data/Comment
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
}

index vanilla_dev_Comment_Delta: vanilla_dev_Comment {
    source = vanilla_dev_Comment_Delta
    path = /usr/local/etc/sphinx/data/Comment_Delta
}
source vanilla_dev_KnowledgeArticle {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_dev
    sql_query_range = SELECT MIN(articleRevisionID),(select MaxID from GDN_SphinxCounter where CounterID = 5) FROM GDN_articleRevision
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 5, max(articleRevisionID) from GDN_articleRevision
    sql_query = SELECT \
            ar.articleRevisionID * 10 + 5, \
            ar.articleRevisionID, \
            a.articleID as DiscussionID, \
            ar.locale as locale,\
            kb.knowledgeBaseID as KnowledgeBaseID, \
            kb.siteSectionGroup as siteSectionGroup,\
            0 as CategoryID, \
            a.knowledgeCategoryID, \
            a.insertUserID, \
            a.updateUserID, \
            5 as dtype, \
            0 as IP, \
            5 as score, \
            unix_timestamp(a.DateInserted) as DateInserted, \
            unix_timestamp(a.dateUpdated) as dateUpdated, \
            ar.name, \
            ar.bodyRendered as body, \
            FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
        FROM GDN_articleRevision ar \
        INNER JOIN GDN_article a \
        ON a.articleID = ar.articleID \
        INNER JOIN GDN_knowledgeCategory c \
        ON a.knowledgeCategoryID = c.knowledgeCategoryID \
        INNER JOIN GDN_knowledgeBase kb \
        ON c.knowledgeBaseID = kb.knowledgeBaseID \
        WHERE ar.status = "published" \
             AND a.status = "published" \
             AND ar.articleRevisionID >= $start AND \
                 ar.articleRevisionID <= $end
    sql_attr_bigint = discussionID
    sql_attr_uint = categoryID
    sql_attr_uint = knowledgeCategoryID
    sql_attr_uint = insertUserID
    sql_attr_uint = updateUserID
    sql_attr_string = locale
    sql_attr_string = siteSectionGroup
    sql_attr_uint = knowledgeBaseID
    sql_attr_uint = dtype
    sql_attr_uint = ip
    sql_attr_float = score
    sql_attr_timestamp = dateUpdated
    sql_attr_uint = status
    sql_attr_timestamp = DateInserted
}


source vanilla_dev_KnowledgeArticle_Delta: vanilla_dev_KnowledgeArticle {
    sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 5), MAX(articleRevisionID) FROM GDN_articleRevision
    sql_query_pre = set names utf8
    sql_query = SELECT \
                ar.articleRevisionID * 10 + 5, \
                ar.articleRevisionID, \
                a.articleID as DiscussionID, \
                ar.locale as locale, \
                kb.knowledgeBaseID as KnowledgeBaseID, \
                kb.siteSectionGroup as siteSectionGroup,\
                0 as CategoryID, \
                a.knowledgeCategoryID, \
                a.insertUserID, \
                a.updateUserID, \
                5 as dtype, \
                0 as IP, \
                5 as score, \
                unix_timestamp(a.DateInserted) as DateInserted, \
                unix_timestamp(a.dateUpdated) as dateUpdated, \
                ar.name, \
                ar.bodyRendered as body, \
                FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
            FROM GDN_articleRevision ar \
            INNER JOIN GDN_article a \
            ON a.articleID = ar.articleID \
            INNER JOIN GDN_knowledgeCategory c \
            ON a.knowledgeCategoryID = c.knowledgeCategoryID \
            INNER JOIN GDN_knowledgeBase kb \
            ON c.knowledgeBaseID = kb.knowledgeBaseID \
            WHERE ar.status = "published" \
                 AND a.status = "published" \
                 AND $start <= $end
    sql_query_killlist = \
                        SELECT (ar.articleRevisionID * 10 + 5) FROM GDN_articleRevision ar \
                        INNER JOIN GDN_article a \
                        ON a.articleID = ar.articleID \
                           AND a.status = "deleted" \
                           AND a.dateUpdated > ar.dateInserted
}

index vanilla_dev_KnowledgeArticle {
    source = vanilla_dev_KnowledgeArticle
    path = /usr/local/etc/sphinx/data/KnowledgeArticle
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
    html_strip = 1
    min_infix_len = 3
    infix_fields = name
    expand_keywords = 1
}

index vanilla_dev_KnowledgeArticle_Delta: vanilla_dev_KnowledgeArticle {
    source = vanilla_dev_KnowledgeArticle_Delta
    path = /usr/local/etc/sphinx/data/KnowledgeArticle_Delta
}

source vanilla_dev_KnowledgeArticleDeleted {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_dev
    sql_query_range = SELECT MIN(articleRevisionID),(select MaxID from GDN_SphinxCounter where CounterID = 6) FROM GDN_articleRevision
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 6, max(articleRevisionID) from GDN_articleRevision
    sql_query = SELECT \
            ar.articleRevisionID * 10 + 6, \
            ar.articleRevisionID, \
            a.articleID as DiscussionID, \
            ar.locale as locale, \
            kb.knowledgeBaseID as KnowledgeBaseID, \
            kb.siteSectionGroup as siteSectionGroup,\
            0 as CategoryID, \
            a.knowledgeCategoryID, \
            a.insertUserID, \
            a.updateUserID, \
            6 as dtype, \
            0 as IP, \
            5 as score, \
            unix_timestamp(a.DateInserted) as DateInserted, \
            unix_timestamp(a.dateUpdated) as dateUpdated, \
            ar.name, \
            ar.bodyRendered as body, \
            FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
        FROM GDN_articleRevision ar \
        INNER JOIN GDN_article a \
        ON a.articleID = ar.articleID \
        INNER JOIN GDN_knowledgeCategory c \
        ON a.knowledgeCategoryID = c.knowledgeCategoryID \
        INNER JOIN GDN_knowledgeBase kb \
        ON c.knowledgeBaseID = kb.knowledgeBaseID \
        WHERE ar.status = "published" \
             AND a.status = "deleted" \
             AND ar.articleRevisionID >= $start AND \
                 ar.articleRevisionID <= $end
    sql_attr_bigint = discussionID
    sql_attr_uint = categoryID
    sql_attr_uint = knowledgeCategoryID
    sql_attr_uint = insertUserID
    sql_attr_uint = updateUserID
    sql_attr_string = locale
    sql_attr_string = siteSectionGroup
    sql_attr_uint = dtype
    sql_attr_uint = ip
    sql_attr_float = score
    sql_attr_timestamp = dateUpdated
    sql_attr_uint = status
    sql_attr_timestamp = DateInserted
}

source vanilla_dev_KnowledgeArticleDeleted_Delta: vanilla_dev_KnowledgeArticleDeleted {
    sql_query_range = SELECT 1, MAX(articleRevisionID) FROM GDN_articleRevision
    sql_query_pre = set names utf8
    sql_query = SELECT \
                ar.articleRevisionID * 10 + 6, \
                ar.articleRevisionID, \
                a.articleID as DiscussionID, \
                ar.locale as locale, \
                kb.knowledgeBaseID as KnowledgeBaseID, \
                kb.siteSectionGroup as siteSectionGroup,\
                0 as CategoryID, \
                a.knowledgeCategoryID, \
                a.insertUserID, \
                a.updateUserID, \
                6 as dtype, \
                0 as IP, \
                5 as score, \
                unix_timestamp(a.DateInserted) as DateInserted, \
                unix_timestamp(a.dateUpdated) as dateUpdated, \
                ar.name, \
                ar.bodyRendered as body, \
                FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
            FROM GDN_articleRevision ar \
            INNER JOIN GDN_article a \
            ON a.articleID = ar.articleID \
            INNER JOIN GDN_knowledgeCategory c \
            ON a.knowledgeCategoryID = c.knowledgeCategoryID \
            INNER JOIN GDN_knowledgeBase kb \
            ON c.knowledgeBaseID = kb.knowledgeBaseID \
            WHERE ar.status = "published" \
                 AND a.status = "deleted" \
                 AND  $start <= $end
    sql_query_killlist = \
                        SELECT (ar.articleRevisionID * 10 + 6) FROM GDN_articleRevision ar \
                        INNER JOIN GDN_article a \
                        ON a.articleID = ar.articleID \
                           AND a.status = "published" \
                           AND a.dateUpdated > ar.dateInserted
}

index vanilla_dev_KnowledgeArticleDeleted {
    source = vanilla_dev_KnowledgeArticleDeleted
    path = /usr/local/etc/sphinx/data/KnowledgeArticleDeleted
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
    html_strip = 1
    min_infix_len = 3
    infix_fields = name
    expand_keywords = 1
}

index vanilla_dev_KnowledgeArticleDeleted_Delta: vanilla_dev_KnowledgeArticleDeleted {
    source = vanilla_dev_KnowledgeArticleDeleted_Delta
    path = /usr/local/etc/sphinx/data/KnowledgeArticleDeleted_Delta
}

source vanilla_test_Discussion {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_test
    sql_query_range = SELECT MIN(DiscussionID),(select MaxID from GDN_SphinxCounter where CounterID = 1) FROM GDN_Discussion
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 1, max(DiscussionID) from GDN_Discussion
    sql_query = select \
            DiscussionID * 10 + 1, \
            DiscussionID, \
            CategoryID, \
            InsertUserID, \
            unix_timestamp(DateInserted) as DateInserted, \
            Name, \
            Body, \
            field(Type, 'Question', 'Poll') as dtype, \
            inet_aton(InsertIPAddress) as IP, \
            Score \
        from GDN_Discussion \
        where \
            DiscussionID >= $start AND \
            DiscussionID <= $end
    sql_attr_uint = DiscussionID
    sql_attr_uint = CategoryID
    sql_attr_uint = InsertUserID
    sql_attr_timestamp = DateInserted
    sql_attr_float = Score
    sql_attr_uint = dtype
    sql_attr_uint = IP
    sql_attr_multi = uint Tags from ranged-query; \
        select DiscussionID * 10 + 1, TagID \
        from GDN_TagDiscussion \
        where DiscussionID between $start and $end; \
        select min(DiscussionID), max(DiscussionID) from GDN_TagDiscussion
}

source vanilla_test_Discussion_Delta: vanilla_test_Discussion {
    sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 1), MAX(DiscussionID) FROM GDN_Discussion
    sql_query_pre = set names utf8
    sql_query = select \
            DiscussionID * 10 + 1, \
            DiscussionID, \
            CategoryID, \
            InsertUserID, \
            unix_timestamp(DateInserted) as DateInserted, \
            Name, \
            Body, \
            field(Type, 'Question', 'Poll') as dtype, \
            inet_aton(InsertIPAddress) as IP, \
            Score \
        from GDN_Discussion \
        where \
           DiscussionID >= $start AND \
           DiscussionID <= $end
}

index vanilla_test_Discussion {
    source = vanilla_test_Discussion
    path = /usr/local/etc/sphinx/data/DiscussionTest
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
}

index vanilla_test_Discussion_Delta: vanilla_test_Discussion {
    source = vanilla_test_Discussion_Delta
    path = /usr/local/etc/sphinx/data/DiscussionTest_Delta
}

source vanilla_test_Comment {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_test
    sql_query_range = SELECT MIN(CommentID),(select MaxID from GDN_SphinxCounter where CounterID = 2) FROM GDN_Comment
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 2, max(CommentID) from GDN_Comment
    sql_query = select \
            c.CommentID * 10 + 2, \
            c.DiscussionID, \
            d.CategoryID, \
            c.InsertUserID, \
            unix_timestamp(c.DateInserted) as DateInserted, \
            concat('RE: ', d.Name) as Name, \
            c.Body, \
            inet_aton(c.InsertIPAddress) as IP, \
            field(d.Type, 'Question') + 100 as dtype, \
            c.Score \
        from GDN_Comment c join GDN_Discussion d on c.DiscussionID = d.DiscussionID \
        where \
            CommentID >= $start AND \
            CommentID <= $end
    sql_attr_uint = CategoryID
    sql_attr_uint = DiscussionID
    sql_attr_uint = InsertUserID
    sql_attr_timestamp = DateInserted
    sql_attr_uint = IP
    sql_attr_uint = dtype
    sql_attr_float = Score
}

source vanilla_test_Comment_Delta: vanilla_test_Comment {
    sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 2), MAX(CommentID) FROM GDN_Comment
    sql_query_pre = set names utf8
    sql_query = select \
            c.CommentID * 10 + 2, \
            c.DiscussionID, \
            d.CategoryID, \
            c.InsertUserID, \
            unix_timestamp(c.DateInserted) as DateInserted, \
            concat('RE: ', d.Name) as Name, \
            c.Body, \
            inet_aton(c.InsertIPAddress) as IP, \
            field(d.Type, 'Question') + 100 as dtype, \
            c.Score \
        from GDN_Comment c join GDN_Discussion d on c.DiscussionID = d.DiscussionID \
        where \
           CommentID >= $start AND \
           CommentID <= $end
}

index vanilla_test_Comment {
    source = vanilla_test_Comment
    path = /usr/local/etc/sphinx/data/CommentTest
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
}

index vanilla_test_Comment_Delta: vanilla_test_Comment {
    source = vanilla_test_Comment_Delta
    path = /usr/local/etc/sphinx/data/CommentTest_Delta
}

source vanilla_test_KnowledgeArticle {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_test
    sql_query_range = SELECT MIN(articleRevisionID),(select MaxID from GDN_SphinxCounter where CounterID = 5) FROM GDN_articleRevision
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 5, max(articleRevisionID) from GDN_articleRevision
    sql_query = SELECT \
            ar.articleRevisionID * 10 + 5, \
            ar.articleRevisionID, \
            a.articleID as DiscussionID, \
            ar.locale as locale, \
            kb.knowledgeBaseID as KnowledgeBaseID, \
            kb.siteSectionGroup as siteSectionGroup,\
            0 as CategoryID, \
            a.knowledgeCategoryID, \
            a.insertUserID, \
            a.updateUserID, \
            5 as dtype, \
            0 as IP, \
            5 as score, \
            unix_timestamp(a.DateInserted) as DateInserted, \
            unix_timestamp(a.dateUpdated) as dateUpdated, \
            ar.name, \
            ar.bodyRendered as body, \
            FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
        FROM GDN_articleRevision ar \
        INNER JOIN GDN_article a \
        ON a.articleID = ar.articleID \
        INNER JOIN GDN_knowledgeCategory c \
        ON a.knowledgeCategoryID = c.knowledgeCategoryID \
        INNER JOIN GDN_knowledgeBase kb \
        ON c.knowledgeBaseID = kb.knowledgeBaseID \
             AND kb.status = "published" \
        WHERE ar.status = "published" \
             AND a.status = "published" \
             AND ar.articleRevisionID >= $start AND \
                 ar.articleRevisionID <= $end
    sql_attr_bigint = discussionID
    sql_attr_uint = categoryID
    sql_attr_uint = knowledgeCategoryID
    sql_attr_uint = insertUserID
    sql_attr_uint = updateUserID
    sql_attr_string = locale
    sql_attr_string = siteSectionGroup
    sql_attr_uint = dtype
    sql_attr_uint = ip
    sql_attr_float = score
    sql_attr_timestamp = dateUpdated
    sql_attr_uint = status
    sql_attr_timestamp = DateInserted
}


source vanilla_test_KnowledgeArticle_Delta: vanilla_test_KnowledgeArticle {
    sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 5), MAX(articleRevisionID) FROM GDN_articleRevision
    sql_query_pre = set names utf8
    sql_query = SELECT \
                ar.articleRevisionID * 10 + 5, \
                ar.articleRevisionID, \
                a.articleID as DiscussionID, \
                ar.locale as locale, \
                kb.knowledgeBaseID as KnowledgeBaseID, \
                kb.siteSectionGroup as siteSectionGroup,\
                0 as CategoryID, \
                a.knowledgeCategoryID, \
                a.insertUserID, \
                a.updateUserID, \
                5 as dtype, \
                0 as IP, \
                5 as score, \
                unix_timestamp(a.DateInserted) as DateInserted, \
                unix_timestamp(a.dateUpdated) as dateUpdated, \
                ar.name, \
                ar.bodyRendered as body, \
                FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
            FROM GDN_articleRevision ar \
            INNER JOIN GDN_article a \
            ON a.articleID = ar.articleID \
            INNER JOIN GDN_knowledgeCategory c \
            ON a.knowledgeCategoryID = c.knowledgeCategoryID \
            INNER JOIN GDN_knowledgeBase kb \
            ON c.knowledgeBaseID = kb.knowledgeBaseID \
                 AND kb.status = "published" \
            WHERE ar.status = "published" \
                 AND a.status = "published" \
                 AND $start <= $end
    sql_query_killlist = \
                        SELECT (ar.articleRevisionID * 10 + 5) FROM GDN_articleRevision ar \
                        INNER JOIN GDN_article a \
                        ON a.articleID = ar.articleID \
                           AND a.status = "deleted" \
                           AND a.dateUpdated > ar.dateInserted \
                        UNION \
                        SELECT (ar.articleRevisionID * 10 + 5) \
                        FROM GDN_article a \
                        INNER JOIN GDN_articleRevision ar \
                        ON a.articleID = ar.articleID \
                           AND ar.status IS NULL \
                           AND a.dateUpdated > ar.dateInserted \
                        UNION \
                        SELECT (ar.articleRevisionID * 10 + 5) \
                        FROM GDN_knowledgeBase kb \
                        INNER JOIN GDN_knowledgeCategory c \
                        ON c.knowledgeBaseID = kb.knowledgeBaseID \
                        INNER JOIN GDN_article a \
                        ON a.knowledgeCategoryID = c.knowledgeCategoryID \
                        INNER JOIN GDN_articleRevision ar \
                        ON a.articleID = ar.articleID \
                        WHERE kb.status = "deleted"
    }

index vanilla_test_KnowledgeArticle {
    source = vanilla_test_KnowledgeArticle
    path = /usr/local/etc/sphinx/data/KnowledgeArticleTest
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
    html_strip = 1
    min_infix_len = 3
    infix_fields = name
    expand_keywords = 1
}

index vanilla_test_KnowledgeArticle_Delta: vanilla_test_KnowledgeArticle {
    source = vanilla_test_KnowledgeArticle_Delta
    path = /usr/local/etc/sphinx/data/KnowledgeArticleTest_Delta2
}

source vanilla_test_KnowledgeArticleDeleted {
    type = mysql
    sql_host = database
    sql_user = root
    sql_pass =
    sql_db = vanilla_test
    sql_query_range = SELECT MIN(articleRevisionID),(select MaxID from GDN_SphinxCounter where CounterID = 6) FROM GDN_articleRevision
    sql_range_step = 10000
    sql_query_pre = set names utf8
    sql_query_pre = replace into GDN_SphinxCounter select 6, max(articleRevisionID) from GDN_articleRevision
    sql_query = SELECT \
            ar.articleRevisionID * 10 + 6, \
            ar.articleRevisionID, \
            a.articleID as DiscussionID, \
            0 as CategoryID, \
            ar.locale as locale, \
            kb.knowledgeBaseID as KnowledgeBaseID, \
            kb.siteSectionGroup as siteSectionGroup,\
            a.knowledgeCategoryID, \
            a.insertUserID, \
            a.updateUserID, \
            6 as dtype, \
            0 as IP, \
            5 as score, \
            unix_timestamp(a.DateInserted) as DateInserted, \
            unix_timestamp(a.dateUpdated) as dateUpdated, \
            ar.name, \
            ar.bodyRendered as body, \
            FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
        FROM GDN_articleRevision ar \
        INNER JOIN GDN_article a \
        ON a.articleID = ar.articleID \
        INNER JOIN GDN_knowledgeCategory c \
        ON a.knowledgeCategoryID = c.knowledgeCategoryID \
        INNER JOIN GDN_knowledgeBase kb \
        ON c.knowledgeBaseID = kb.knowledgeBaseID \
             AND kb.status = "published" \
        WHERE ar.status = "published" \
             AND a.status = "deleted" \
             AND ar.articleRevisionID >= $start AND \
                 ar.articleRevisionID <= $end
    sql_attr_bigint = discussionID
    sql_attr_uint = categoryID
    sql_attr_uint = knowledgeCategoryID
    sql_attr_uint = insertUserID
    sql_attr_uint = updateUserID
    sql_attr_string = locale
    sql_attr_string = siteSectionGroup
    sql_attr_uint = dtype
    sql_attr_uint = ip
    sql_attr_float = score
    sql_attr_timestamp = dateUpdated
    sql_attr_uint = status
    sql_attr_timestamp = DateInserted
}

source vanilla_test_KnowledgeArticleDeleted_Delta: vanilla_test_KnowledgeArticleDeleted {
    sql_query_range = SELECT 1, MAX(articleRevisionID) FROM GDN_articleRevision
    sql_query_pre = set names utf8
    sql_query = SELECT \
                ar.articleRevisionID * 10 + 6, \
                ar.articleRevisionID, \
                a.articleID as DiscussionID, \
                ar.locale as locale, \
                kb.knowledgeBaseID as KnowledgeBaseID, \
                kb.siteSectionGroup as siteSectionGroup,\
                0 as CategoryID, \
                a.knowledgeCategoryID, \
                a.insertUserID, \
                a.updateUserID, \
                6 as dtype, \
                0 as IP, \
                5 as score, \
                unix_timestamp(a.DateInserted) as DateInserted, \
                unix_timestamp(a.dateUpdated) as dateUpdated, \
                ar.name, \
                ar.bodyRendered as body, \
                FIND_IN_SET(a.status, 'published,deleted,undeleted') as status \
            FROM GDN_articleRevision ar \
            INNER JOIN GDN_article a \
            ON a.articleID = ar.articleID \
            INNER JOIN GDN_knowledgeCategory c \
            ON a.knowledgeCategoryID = c.knowledgeCategoryID \
            INNER JOIN GDN_knowledgeBase kb \
            ON c.knowledgeBaseID = kb.knowledgeBaseID \
                 AND kb.status = "published" \
            WHERE ar.status = "published" \
                 AND a.status = "deleted" \
                 AND  $start <= $end
    sql_query_killlist = \
                        SELECT (ar.articleRevisionID * 10 + 6) FROM GDN_articleRevision ar \
                        INNER JOIN GDN_article a \
                        ON a.articleID = ar.articleID \
                           AND a.status = "published" \
                           AND a.dateUpdated > ar.dateInserted \
                        UNION \
                        SELECT (ar.articleRevisionID * 10 + 6) \
                        FROM GDN_knowledgeBase kb \
                        INNER JOIN GDN_knowledgeCategory c \
                        ON c.knowledgeBaseID = kb.knowledgeBaseID \
                        INNER JOIN GDN_article a \
                        ON a.knowledgeCategoryID = c.knowledgeCategoryID \
                        INNER JOIN GDN_articleRevision ar \
                        ON a.articleID = ar.articleID \
                        WHERE kb.status = "deleted"
}

index vanilla_test_KnowledgeArticleDeleted {
    source = vanilla_test_KnowledgeArticleDeleted
    path = /usr/local/etc/sphinx/data/KnowledgeArticleDeletedTest
    morphology = stem_en
    stopwords = /usr/local/etc/sphinx/data/stops.txt
    html_strip = 1
    min_infix_len = 3
    infix_fields = name
    expand_keywords = 1
}

index vanilla_test_KnowledgeArticleDeleted_Delta: vanilla_test_KnowledgeArticleDeleted {
    source = vanilla_test_KnowledgeArticleDeleted_Delta
    path = /usr/local/etc/sphinx/data/KnowledgeArticleDeleted_DeltaTest
}

source vanilla_dev_Group {
  type = mysql
  sql_host = database
  sql_user = root
  sql_pass =
  sql_db = vanilla_dev
  sql_query_range = SELECT MIN(GroupID),(select MaxID from GDN_SphinxCounter where CounterID = 4) FROM GDN_Group
  sql_range_step = 10000
  sql_query_pre = set names utf8
  sql_query_pre = replace into GDN_SphinxCounter select 4, max(GroupID) from GDN_Group
  sql_query = select \
        GroupID * 10 + 4, \
        GroupID, \
        3000000000 + GroupID as DiscussionID, \
        0 as CategoryID, \
        InsertUserID, \
        unix_timestamp(DateInserted) as DateInserted, \
        Name, \
        Description as Body, \
        400 as dtype, \
        0 as IP, \
        1000 as Score \
    from GDN_Group \
    where \
       GroupID >= $start AND \
       GroupID <= $end
  sql_attr_uint = GroupID
  sql_attr_uint = DiscussionID
  sql_attr_uint = CategoryID
  sql_attr_uint = InsertUserID
  sql_attr_timestamp = DateInserted
  sql_attr_float = Score
  sql_attr_uint = dtype
  sql_attr_uint = IP
}

source vanilla_dev_Group_Delta: vanilla_dev_Group {
  sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 4), MAX(GroupID) FROM GDN_Group
  sql_query_pre = set names utf8
  sql_query = select \
       GroupID * 10 + 4, \
       GroupID, \
       3000000000 + GroupID as DiscussionID, \
       0 as CategoryID, \
       InsertUserID, \
       unix_timestamp(DateInserted) as DateInserted, \
       Name, \
       Description as Body, \
       400 as dtype, \
       0 as IP, \
       1000 as Score \
    from GDN_Group \
    where \
       GroupID >= $start AND \
       GroupID <= $end
}

index vanilla_dev_Group {
  source = vanilla_dev_Group
  path = /usr/local/etc/sphinx/data/vanilla_dev_Group
  morphology = stem_en
  stopwords = /usr/local/etc/sphinx/data/stops.txt
}

index vanilla_dev_Group_Delta: vanilla_dev_Group {
  source = vanilla_dev_Group_Delta
  path = /usr/local/etc/sphinx/data/vanilla_dev_Group_Delta
}



source vanilla_test_Group {
  type = mysql
  sql_host = database
  sql_user = root
  sql_pass =
  sql_db = vanilla_test
  sql_query_range = SELECT MIN(GroupID),(select MaxID from GDN_SphinxCounter where CounterID = 4) FROM GDN_Group
  sql_range_step = 10000
  sql_query_pre = set names utf8
  sql_query_pre = replace into GDN_SphinxCounter select 4, max(GroupID) from GDN_Group
  sql_query = select \
        GroupID * 10 + 4, \
        GroupID, \
        3000000000 + GroupID as DiscussionID, \
        0 as CategoryID, \
        InsertUserID, \
        unix_timestamp(DateInserted) as DateInserted, \
        Name, \
        Description as Body, \
        400 as dtype, \
        0 as IP, \
        1000 as Score \
    from GDN_Group \
    where \
       GroupID >= $start AND \
       GroupID <= $end
  sql_attr_uint = GroupID
  sql_attr_uint = DiscussionID
  sql_attr_uint = CategoryID
  sql_attr_uint = InsertUserID
  sql_attr_timestamp = DateInserted
  sql_attr_float = Score
  sql_attr_uint = dtype
  sql_attr_uint = IP
}

source vanilla_test_Group_Delta: vanilla_dev_Group {
  sql_query_range = SELECT (select MaxID from GDN_SphinxCounter where CounterID = 4), MAX(GroupID) FROM GDN_Group
  sql_query_pre = set names utf8
  sql_query = select \
       GroupID * 10 + 4, \
       GroupID, \
       3000000000 + GroupID as DiscussionID, \
       0 as CategoryID, \
       InsertUserID, \
       unix_timestamp(DateInserted) as DateInserted, \
       Name, \
       Description as Body, \
       400 as dtype, \
       0 as IP, \
       1000 as Score \
    from GDN_Group \
    where \
       GroupID >= $start AND \
       GroupID <= $end
}

index vanilla_test_Group {
  source = vanilla_dev_Group
  path = /usr/local/etc/sphinx/data/vanilla_test_Group
  morphology = stem_en
  stopwords = /usr/local/etc/sphinx/data/stops.txt
}

index vanilla_test_Group_Delta: vanilla_test_Group {
  source = vanilla_test_Group_Delta
  path = /usr/local/etc/sphinx/data/vanilla_test_Group_Delta
}
